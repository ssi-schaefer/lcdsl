/*
 * Copyright (c) SSI Schaefer IT Solutions
 */
grammar com.wamas.ide.launching.LcDsl with org.eclipse.xtext.common.Terminals

generate lcDsl "http://www.wamas.com/ide/launching/LcDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/**
 * TODO: The language is still missing some things that could be set:
 * 
 * Java:
 *   - additional classpath entries (low prio)
 *   - additional source lookup (low prio)
 * 
 * Eclipse,Rap:
 *   - config location (low prio)
 *   - default start level & autostart
 * 
 * How to support different launch config types - some generic attribute support?
 * Or really implement support for each type separately (probably the best experience).
 */

LCModel:
	configurations+=LaunchConfig*
;

/**
 * explicit = explicitly defined plug-in list. no auto-resolve of plug-ins.
 * manual = manually generated through context menu only. no automatic build.
 * foreground = don't launch in background, but rather block
 * no-console = don't allocate a console (no stdin then)
 * no-validate = don't validate plugins prior to launch
 * sw-install-allowed = allow software installation in eclipse config
 * replace-env = replace environment instead of appending variables
 */
LaunchConfig:
	((explicit?='explicit')? // Eclipse, JUnit-Plugin, SWTBot, RAP
		& (manual?='manual')? // All
		& (abstract?='abstract')? // All
		& (foreground?='foreground')? // All  
		& (noConsole?='no-console')? // All but Groups
		& (noValidate?='no-validate')? // Eclipse, JUnit-Plugin, SWTBot, RAP
		& (swInstallSupport?='sw-install-allowed')? // Eclipse, JUnit-Plugin, SWTBot
		& (replaceEnv?='replace-env')? // All but Groups
		& (stopInMain?='stop-in-main')? // Java
		& (keepRunning?='keep-running')? // JUnit-Plugin, SWTBot
		& (runInUiThread?='run-in-ui-thread')? // JUnit-Plugin
		& (qualify?='qualified' (BRACKET_OPEN qualifierId=STRING BRACKET_CLOSE)?)? // All - naming
	) type=LaunchConfigType 'configuration' name=FQName 
	(':' superConfig=[LaunchConfig|FQName])? BLOCK_BEGIN
		( // things that may appear only once
			(clears=ClearOption)? // Eclipse, JUnit-Plugin, SWTBot, RAP (partial)
			& (workspace=Workspace)? // Eclipse, JUnit-Plugin, SWTBot, RAP
			& (workingDir=WorkingDir)? // All but Groups
			& (memory=MemoryOption)? // All but Groups
			& (mainProject=MainProject)? // Java, JUnit-Plugin, SWTBot
			& (mainType=MainType)? // Java
			& (application=ApplicationExtPoint)? // Eclipse, JUnit-Plugin, SWTBot
			& (product=ProductExtPoint)? // Eclipse, JUnit-Plugin, SWTBot
			& (favorites=Favorites)? // All
			& (redirect=Redirect)? // All but Groups
			& (execEnv=ExecutionEnvironment)? // All but Groups
			& (configIniTemplate=ConfigIniTemplate)? // Eclipse, JUnit-Plugin, SWTBot
			& (javaMainSearch=JavaMainSearch)? // Java
			& (servletConfig=RapServletConfig)? // RAP
			& (contentProviderProduct=ContentProviderProduct)? // Eclipse, JUnit-Plugin, SWTBot, RAP
			& (test=TestConfig)? // JUnit-Plugin, SWTBot
			// things that may appear multiple times
			& (plugins+=AddPlugin)* // Eclipse, JUnit-Plugin, SWTBot, RAP
			& (features+=AddFeature)* // Eclipse, JUnit-Plugin, SWTBot, RAP
			& (ignore+=IgnorePlugin)* // Eclipse, JUnit-Plugin, SWTBot, RAP
			& (groupMembers+=GroupMember)* // Groups 					// TODO: content assist, validation, update on rename
			& (vmArgs+=VmArgument)* // All but Groups
			& (progArgs+=ProgramArgument)* // All but Groups
			& (envVars+=EnvironmentVariable)* // All but Groups
			& (traces+=TraceEnablement)* // Eclipse, JUnit-Plugin, SWTBot, RAP
		)
	BLOCK_END
;

Workspace:
	'workspace' workspace=AnyPath ';'
;

WorkingDir:
	'working-dir' workingDir=ExistingPath ';'
;

MainProject:
	'project' (self?='self'|project=Project) ';'
;

MainType:
	'main-class' mainClass=JavaMainType ';'
;

AddPlugin:
	(optional?='optional')? 'plugin' plugin=PluginWithVersionAndStartLevel ';'
;

AddFeature:
	(optional?='optional')? 'feature' feature=FeatureWithVersion ';'
;

ContentProviderProduct:
	'content-provider' product=ExistingPath ';'
;

IgnorePlugin:
	'ignore' plugin=PluginWithVersion ';'
;

VmArgument:
	{VmArgument} 'vm-argument' (arguments+=StringWithVariables)* ';'
;

ProgramArgument:
	{ProgramArgument} 'argument' (arguments+=StringWithVariables)* ';'
;

EnvironmentVariable:
	{EnvironmentVariable} 'environment' name=ID EQ value=StringWithVariables ';'
;

ApplicationExtPoint:
	'application' name = FQName ';'
;

ProductExtPoint:
	'product' name = FQName ';'
;

Favorites:
	{Favorites} 'favorite' (types+=LaunchModeType)* ';'
;

Redirect:
	{Redirect} 'redirect' ((outWhich = OutputStream 'to' outFile=AnyPath (noAppend?='!')?)? & (inWhich=InputStream 'from' inFile=ExistingPath)?) ';'
;

ExecutionEnvironment:
	'execution-environment' name=STRING ';'
;

ConfigIniTemplate:
	'config-ini-template' path=ExistingPath ';'
;

TraceEnablement:
	'trace' plugin=FQName (what+=STRING)* ';'
;

JavaMainSearch:
	{JavaMainSearch} 'search-main' ((system?='system')? & (inherited?='inherited')?) ';'
;

RapServletConfig:
	'servlet' BLOCK_BEGIN
		(
			('path' servletPath=STRING ';')
			& ('browser' browserMode=BrowserLaunchMode ';')?
			& ('port' serverPort=INT ';')?
			& ('session-timeout' sessionTimeout=INT ';')?
			& ('context-path' contextPath=STRING ';')?
			& ('dev-mode' devMode=BOOLEAN ';')?
		)
	BLOCK_END
;

Path:
	ExistingPath|AnyPath // TODO: content assist? is it possible?
;

ExistingPath:
	name = StringWithVariables
;

AnyPath:
	name = StringWithVariables
;

PluginWithVersionAndStartLevel:
	plugin = PluginWithVersion ((autoStart?='autostart')? & ('startlevel' startLevel=INT)?)
;

PluginWithVersion:
	name = FQName (version=VERSION)?
;

FeatureWithVersion:
	name = FQName (version=VERSION)?
;

Project:
	name = FQName
;

JavaMainType:
	name = FQName
;

ClearOption:
	{ClearOption} 'clear' (((workspace?='workspace' | log?='log') (noAskClear?='!')?)? & (config?='config')?) ';'
;

MemoryOption:
	{MemoryOption} 'memory' (('min' EQ min=INT minUnit=MemoryUnit)? & ('max' EQ max=INT maxUnit=MemoryUnit)? & ('perm' EQ perm=INT permUnit=MemoryUnit)?) ';'
;

GroupMember:
	((type=LaunchModeType)? & (adopt?='adopt')?) 'member' member=[LaunchConfig|FQName] (postAction=GroupPostLaunchAction)? ';'
;

GroupPostLaunchAction:
	GroupPostLaunchDelay|GroupPostLaunchRegex|GroupPostLaunchWait
;

GroupPostLaunchDelay:
	'delay' delay=INT
;

GroupPostLaunchRegex:
	'regex' regex=STRING
;

GroupPostLaunchWait:
	{GroupPostLaunchWait} 'wait'
;

StringWithVariables:
	value=STRING
;

TestConfig:
	{TestConfig} 'test' BLOCK_BEGIN
		(
			('runner' runner=TestRunnerType ';')?
			& ('container' container=STRING ';')?
			& ('class' class=FQName ';')?
			& ('method' method=STRING ';')?
			& ('exclude-tags' excludeTags=Tags ';')?
			& ('include-tags' includeTags=Tags ';')?
		)
	BLOCK_END
;

/**
 * A possibly fully qualified name (separated by '.').
 */
FQName:
	ID ('.' ID)*
;

Tags:
	ID (',' ID)*
;

enum BrowserLaunchMode:
	INTERNAL='internal' | EXTERNAL = 'external' | NONE = 'none'
;

enum LaunchConfigType:
	JAVA = "java" | ECLIPSE = "eclipse" | RAP = "rap" | GROUP = "group" | SWTBOT = "swtbot" | JUNIT_PLUGIN = "junit-plugin"
;

enum LaunchModeType:
	INHERIT = "inherit" | RUN = "run" | DEBUG = "debug" | PROFILE = "profile" | COVERAGE = "coverage"
;

enum MemoryUnit:
	MB = 'M' | MB = 'mb' | MB = 'MB' | MB = 'm' |
	GB = 'G' | GB = 'gb' | GB = 'GB' | GB = 'g' 
;

enum OutputStream:
	STDOUT = "stdout" | STDERR = "stderr" | BOTH = "both-out"
;

enum InputStream:
	STDIN = "stdin"
;

enum TestRunnerType:
	JUNIT5 = "junit5" | JUNIT4 = "junit4" | JUNIT3 = "junit3"
;

@Override 
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal BOOLEAN returns ecore::EBoolean: ('true' | 'false');
@Override 
terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('.'? ('a'..'z'|'A'..'Z'|'^'|'_'|'-'|'0'..'9'))*;
terminal QUALIFIER: ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;
terminal VERSION: INT (('.' INT) (('.' INT) ('.' QUALIFIER)?)?)?;
terminal EQ: '=';
terminal BLOCK_BEGIN: '{';
terminal BLOCK_END: '}';
terminal BRACKET_OPEN: '(';
terminal BRACKET_CLOSE: ')';

